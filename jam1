package jam1;
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Jam1 {

    public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);
       
        int D, ri, ci;// D dimension, ri rows, ci columns
        D = scanner.nextInt(); 
        ri = D; 
        ci = D;  
        int[][] grid = new int[ri][ci]; //
        int result = 0; //result can be colored
        int[] riCanColored = new int[D];
        int[] ciCanColored = new int[D];
        
        if(D<=50 && D>=1 && ri<=D && ri>=0 && ci>=0 && ci<=D){ // constrains 
               for (int i = 0; i < D; i++) {
                riCanColored[i] = scanner.nextInt(); 
                 }
               for (int i = 0; i < D; i++) {
                ciCanColored[i] = scanner.nextInt(); 
                 }
               
               for (int i = 0; i < grid.length; i++) {
                   for (int j = 0; j < grid[i].length; j++) {
                       int value = scanner.nextInt();
                       if(value==0)
                           grid[i][j]=value;
                       else
                           grid[i][j]=-1;
                       value = -2;
                   }
            }
               int n=0;// number of 
               for (int i = 0; i < grid.length; i++) {
                   for (int j = 0; j < grid[i].length; j++) {
                        if(grid[i][j]==-1)
                            n+=1;
                   }
                   if(n <= grid[i].length && n<=riCanColored[i])
                       result=1;
                   else
                       result=0;
                   
                   if(i==(grid.length-1)){
                       if(n <= D && n <= ciCanColored[i])
                           result=1;
                       else
                           result=0;
                           }
                   n=0;
               }
               System.out.println(result);
        }else // end of constrains
            System.out.println("Invalid D, ri, or ci");
    }
}
